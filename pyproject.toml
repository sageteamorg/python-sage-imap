[tool.poetry]
name = "python-sage-imap"
version = "1.0.0"
description = "A Python package for managing IMAP connections and email operations."
authors = ["Sepehr Akbarzadeh <sepehr@sageteam.org>"]
readme = "README.md"
license = "MIT"
keywords = ["python", "imap", "email", "mailbox", "python-packages"]
repository = "https://github.com/sageteamorg/python-sage-imap"

classifiers=[
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
]

packages = [
    { include = "sage_imap" }
]

[tool.poetry.urls]
"Documentation" = "https://python-sage-imap.readthedocs.io/en/latest/"
"Source Code" = "https://github.com/sageteamorg/python-sage-imap"
"Issues" = "https://github.com/sageteamorg/python-sage-imap/issues"

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
requests = "^2.32.3"

[tool.poetry.group.dev.dependencies]
black = "^24.4.2"
isort = "^5.13.2"
mypy = "^1.10.1"
pytest = "^8.2.2"
tox = "^4.15.1"
coverage = "^7.5.4"
pre-commit = "^3.7.1"
pylint = "^3.2.5"
pytest-cov = "^5.0.0"
commitizen = "^3.27.0"
docformatter = "^1.7.5"
codecov = "^2.1.13"
sphinx-rtd-theme = "^2.0.0"
ruff = "^0.7.1"
bandit = {extras = ["toml"], version = "^1.7.10"}

[tool.pytest.ini_options]
# Basic pytest configuration
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Test discovery and execution
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=sage_imap",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=95",
    "--durations=10"
]

# Markers
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "email: Email-related tests",
    "message_set: MessageSet-related tests",
    "attachment: Attachment-related tests"
]

# Test filtering
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

# Logging
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Directories to ignore
norecursedirs = [
    "node_modules",
    "env",
    "venv",
    ".venv",
    "dist",
    "build",
]

[tool.bandit]
targets = ["./sage_sms"]
exclude_dirs = [
    "tests",
    "migrations",
]
severity = "medium"
confidence = "medium"
max_lines = 500
progress = true
reports = true
output_format = "screen"
output_file = "bandit_report.txt"
include = ["B101", "B102"]
exclude_tests = ["B301", "B302"]

[tool.bandit.plugins]
B104 = { check_typed_list = true }

[tool.mypy]
mypy_path = "stubs"
disallow_untyped_calls = true
disallow_untyped_defs = true
ignore_missing_imports = true
explicit_package_bases = true
exclude = '''
^docs/source/conf.py|
^build/|
^tests/|
^stubs/|
^kernel/
'''

[tool.black]
line-length = 88
exclude = '''
/(
    \.git
  | \.venv
  | build
  | dist
  | migrations
  | venv
  | env
  | __pycache__
  | static
  | media
  | node_modules
  | env
  | kernel
  | \.mypy_cache
  | \.pytest_cache
  | .*\.egg-info
)/
'''

[tool.isort]
profile = "black"
line_length = 88
skip = [
    "venv",
    ".venv",
    "build",
    "dist",
    ".git",
    "__pycache__",
    "*.egg-info",
    ".mypy_cache",
    ".pytest_cache",
    "migrations",
    "static",
    "media",
    "node_modules",
    "env",
    "kernel"
]

[tool.coverage.run]
source = ["sage_imap"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "kernel/*",
    "*/apps.py",
    "manage.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstract",
    "if self\\.debug",
    "if 0:",
]

[tool.coverage.html]
directory = "htmlcov"
title = "Python Sage IMAP Coverage Report"

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"

[tool.commitizen.settings]
increment_types = ["feat", "fix"]

[tool.pylint]
disable = [
    "C0114",  # Missing module docstring
    "C0115",  # Missing class docstring
    "C0116",  # Missing function or method docstring
    "E1101",  # Instance of 'Foo' has no 'bar' member (Django dynamic attributes)
    "W0212",  # Access to a protected member _foo of a client class
    "C0330",  # Wrong hanging indentation before block (conflicts with Black)
]
max-line-length = 88
ignore = [
    "migrations/*",
    "venv/*",
    "build/*",
    "dist/*",
    ".git/*",
    "__pycache__/*",
    "*.egg-info/*",
    ".mypy_cache/*",
    ".pytest_cache/*"
]
load-plugins = [
    "pylint_django",
    "pylint.extensions.docparams",
]
django-settings-module = "myproject.settings"
good-names = [
    "qs",  # QuerySet abbreviation
    "pk",  # Primary key abbreviation
    "id",  # Identifier
]
suggestion-mode = true
const-rgx = "([A-Z_][A-Z0-9_]*)|(__.*__)"
attr-rgx = "[a-z_][a-z0-9_]{2,30}$"
variable-rgx = "[a-z_][a-z0-9_]{2,30}$"
argument-rgx = "[a-z_][a-z0-9_]{2,30}$"
argument-name-hint = [
    "cls",  # class method first argument
    "self",  # instance method first argument
]
method-rgx = "[a-z_][a-z0-9_]{2,30}$"
function-rgx = "[a-z_][a-z0-9_]{2,30}$"
class-rgx = "[A-Z_][a-zA-Z0-9]+$"
module-rgx = "(([a-z_][a-z0-9_]*)|(__.*__))$"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
