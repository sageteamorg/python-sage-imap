from _typeshed import Incomplete
from dataclasses import dataclass
from sage_imap.exceptions import IMAPFlagOperationError as IMAPFlagOperationError
from sage_imap.helpers.enums import Flag as Flag, FlagCommand as FlagCommand
from sage_imap.models.email import EmailIterator as EmailIterator, EmailMessage as EmailMessage
from sage_imap.models.message import MessageSet as MessageSet
from typing import Any

logger: Incomplete

@dataclass
class FlagOperationResult:
    success: bool
    message_count: int
    flags_modified: list[Flag]
    operation_time: float
    error_message: str | None = ...
    failed_messages: list[str] = ...
    def __init__(self, success, message_count, flags_modified, operation_time, error_message=..., failed_messages=...) -> None: ...

class IMAPFlagService:
    mailbox: Incomplete
    operation_history: Incomplete
    def __init__(self, mailbox: IMAPMailboxService) -> None: ...
    def add_flag(self, msg_ids: MessageSet, flag: Flag) -> FlagOperationResult: ...
    def remove_flag(self, msg_ids: MessageSet, flag: Flag) -> FlagOperationResult: ...
    def bulk_add_flags(self, msg_ids: MessageSet, flags: list[Flag]) -> list[FlagOperationResult]: ...
    def bulk_remove_flags(self, msg_ids: MessageSet, flags: list[Flag]) -> list[FlagOperationResult]: ...
    def set_flags(self, msg_ids: MessageSet, flags: list[Flag]) -> FlagOperationResult: ...
    def get_message_flags(self, msg_id: str) -> list[Flag]: ...
    def sync_flags_with_emails(self, emails: EmailIterator) -> dict[str, list[Flag]]: ...
    def mark_as_read(self, msg_ids: MessageSet) -> FlagOperationResult: ...
    def mark_as_unread(self, msg_ids: MessageSet) -> FlagOperationResult: ...
    def mark_as_important(self, msg_ids: MessageSet) -> FlagOperationResult: ...
    def mark_as_deleted(self, msg_ids: MessageSet) -> FlagOperationResult: ...
    def archive_messages(self, msg_ids: MessageSet) -> list[FlagOperationResult]: ...
    def get_operation_statistics(self) -> dict[str, Any]: ...
    def clear_operation_history(self) -> None: ...
    def get_flag_summary(self, emails: EmailIterator) -> dict[str, int]: ...
