from _typeshed import Incomplete
from dataclasses import dataclass
from sage_imap.exceptions import IMAPDefaultFolderError as IMAPDefaultFolderError, IMAPFolderExistsError as IMAPFolderExistsError, IMAPFolderNotFoundError as IMAPFolderNotFoundError, IMAPFolderOperationError as IMAPFolderOperationError
from sage_imap.helpers.enums import DefaultMailboxes as DefaultMailboxes
from sage_imap.services.client import IMAPClient as IMAPClient
from typing import Any

logger: Incomplete

@dataclass
class FolderInfo:
    name: str
    delimiter: str = ...
    attributes: list[str] = ...
    exists: bool = ...
    selectable: bool = ...
    has_children: bool = ...
    has_no_children: bool = ...
    marked: bool = ...
    unmarked: bool = ...
    message_count: int | None = ...
    recent_count: int | None = ...
    unseen_count: int | None = ...
    def __post_init__(self) -> None: ...
    def __init__(self, name, delimiter=..., attributes=..., exists=..., selectable=..., has_children=..., has_no_children=..., marked=..., unmarked=..., message_count=..., recent_count=..., unseen_count=...) -> None: ...

@dataclass
class FolderOperationResult:
    success: bool
    folder_name: str
    operation: str
    operation_time: float
    error_message: str | None = ...
    details: dict[str, Any] | None = ...
    def __init__(self, success, folder_name, operation, operation_time, error_message=..., details=...) -> None: ...

class IMAPFolderService:
    client: Incomplete
    operation_history: Incomplete
    def __init__(self, client: IMAPClient) -> None: ...
    def create_folder(self, folder_name: str, parent: str | None = None) -> FolderOperationResult: ...
    def rename_folder(self, old_name: str, new_name: str) -> FolderOperationResult: ...
    def delete_folder(self, folder_name: str, force: bool = False) -> FolderOperationResult: ...
    def list_folders(self, pattern: str = '*', reference: str = '') -> list[FolderInfo]: ...
    def get_folder_info(self, folder_name: str) -> FolderInfo: ...
    def folder_exists(self, folder_name: str) -> bool: ...
    def get_folder_hierarchy(self) -> dict[str, list[str]]: ...
    def copy_folder_structure(self, source_folder: str, target_folder: str) -> list[FolderOperationResult]: ...
    def get_folder_statistics(self) -> dict[str, Any]: ...
    def clear_operation_history(self) -> None: ...
    def subscribe_folder(self, folder_name: str) -> FolderOperationResult: ...
    def unsubscribe_folder(self, folder_name: str) -> FolderOperationResult: ...
    def list_subscribed_folders(self) -> list[FolderInfo]: ...
    def get_folder_quota(self, folder_name: str) -> dict[str, Any] | None: ...
