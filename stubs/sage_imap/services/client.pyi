import imaplib
from _typeshed import Incomplete
from collections.abc import Generator
from dataclasses import dataclass
from datetime import datetime, timedelta
from sage_imap.exceptions import IMAPAuthenticationError as IMAPAuthenticationError, IMAPConnectionError as IMAPConnectionError
from typing import Any

logger: Incomplete

@dataclass
class ConnectionMetrics:
    connection_attempts: int = ...
    successful_connections: int = ...
    failed_connections: int = ...
    reconnection_attempts: int = ...
    last_connection_time: datetime | None = ...
    last_error: Exception | None = ...
    total_operations: int = ...
    failed_operations: int = ...
    average_response_time: float = ...
    connection_uptime: timedelta = ...
    def __init__(self, connection_attempts=..., successful_connections=..., failed_connections=..., reconnection_attempts=..., last_connection_time=..., last_error=..., total_operations=..., failed_operations=..., average_response_time=..., connection_uptime=...) -> None: ...

@dataclass
class ConnectionConfig:
    host: str
    username: str
    password: str
    port: int = ...
    use_ssl: bool = ...
    timeout: float = ...
    max_retries: int = ...
    retry_delay: float = ...
    retry_exponential_backoff: bool = ...
    max_retry_delay: float = ...
    keepalive_interval: float = ...
    health_check_interval: float = ...
    enable_monitoring: bool = ...
    def __init__(self, host, username, password, port=..., use_ssl=..., timeout=..., max_retries=..., retry_delay=..., retry_exponential_backoff=..., max_retry_delay=..., keepalive_interval=..., health_check_interval=..., enable_monitoring=...) -> None: ...

class ConnectionPool:
    max_connections: Incomplete
    def __init__(self, max_connections: int = 10) -> None: ...
    def get_connection_key(self, config: ConnectionConfig) -> str: ...
    def get_connection(self, config: ConnectionConfig) -> imaplib.IMAP4_SSL | None: ...
    def return_connection(self, config: ConnectionConfig, connection: imaplib.IMAP4_SSL) -> None: ...
    def clear_pool(self) -> None: ...

def retry_on_failure(max_retries: int = 3, delay: float = 1.0, exponential_backoff: bool = True): ...
def monitor_operation(func): ...

class IMAPClient:
    config: Incomplete
    connection: Incomplete
    metrics: Incomplete
    use_pool: Incomplete
    def __init__(self, host: str, username: str, password: str, port: int = 993, use_ssl: bool = True, timeout: float = 30.0, max_retries: int = 3, retry_delay: float = 1.0, use_pool: bool = False, **kwargs) -> None: ...
    @classmethod
    def from_config(cls, config: ConnectionConfig, **kwargs) -> IMAPClient: ...
    def connect(self) -> imaplib.IMAP4_SSL: ...
    def disconnect(self) -> None: ...
    def is_connected(self) -> bool: ...
    def health_check(self) -> dict[str, Any]: ...
    def get_metrics(self) -> ConnectionMetrics: ...
    def reset_metrics(self) -> None: ...
    def temporary_connection(self) -> Generator[Incomplete]: ...
    def __enter__(self) -> imaplib.IMAP4_SSL: ...
    def __exit__(self, exc_type: type | None, exc_value: BaseException | None, traceback: object | None) -> None: ...
    def __del__(self) -> None: ...
    def __getattr__(self, name): ...

def clear_connection_pool() -> None: ...
def get_pool_stats() -> dict[str, Any]: ...
