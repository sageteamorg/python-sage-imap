from _typeshed import Incomplete
from dataclasses import dataclass
from datetime import datetime
from sage_imap.helpers.enums import Flag, MailboxStatusItems, MessagePart
from sage_imap.helpers.search import IMAPSearchCriteria
from sage_imap.helpers.typings import Mailbox, RawEmail
from sage_imap.models.email import EmailIterator, EmailMessage
from sage_imap.models.message import MessageSet
from sage_imap.services.client import IMAPClient
from typing import Any

__all__ = ['IMAPMailboxService', 'IMAPMailboxUIDService', 'MailboxOperationResult', 'BulkOperationResult']

@dataclass
class MailboxOperationResult:
    success: bool
    operation: str
    message_count: int = ...
    affected_messages: list[str] = ...
    execution_time: float = ...
    error_message: str | None = ...
    warnings: list[str] = ...
    metadata: dict[str, Any] = ...
    def __post_init__(self) -> None: ...
    def __init__(self, success, operation, message_count=..., affected_messages=..., execution_time=..., error_message=..., warnings=..., metadata=...) -> None: ...

@dataclass
class BulkOperationResult:
    operation: str
    total_messages: int
    successful_messages: int
    failed_messages: int
    execution_time: float
    batch_size: int
    batches_processed: int
    errors: list[str] = ...
    warnings: list[str] = ...
    metadata: dict[str, Any] = ...
    @property
    def success_rate(self) -> float: ...
    @property
    def is_successful(self) -> bool: ...
    def __init__(self, operation, total_messages, successful_messages, failed_messages, execution_time, batch_size, batches_processed, errors=..., warnings=..., metadata=...) -> None: ...

@dataclass
class MailboxStatistics:
    total_messages: int
    unread_messages: int
    flagged_messages: int
    recent_messages: int
    size_bytes: int
    oldest_message_date: datetime | None = ...
    newest_message_date: datetime | None = ...
    message_size_distribution: dict[str, int] = ...
    flag_distribution: dict[str, int] = ...
    sender_distribution: dict[str, int] = ...
    def __init__(self, total_messages, unread_messages, flagged_messages, recent_messages, size_bytes, oldest_message_date=..., newest_message_date=..., message_size_distribution=..., flag_distribution=..., sender_distribution=...) -> None: ...

class MailboxValidator:
    @staticmethod
    def validate_message_set(msg_set: MessageSet, expected_mailbox: str | None = None) -> bool: ...
    @staticmethod
    def validate_mailbox(mailbox: Mailbox) -> bool: ...
    @staticmethod
    def validate_email_data(emails: EmailIterator | list[EmailMessage]) -> bool: ...

class MailboxMonitor:
    operation_counts: Incomplete
    operation_times: Incomplete
    error_counts: Incomplete
    last_operations: Incomplete
    start_time: Incomplete
    def __init__(self) -> None: ...
    def record_operation(self, operation: str, execution_time: float, success: bool = True): ...
    def get_statistics(self) -> dict[str, Any]: ...

class BaseMailboxService:
    client: Incomplete
    current_selection: Incomplete
    monitor: Incomplete
    validator: Incomplete
    def __init__(self, client: IMAPClient) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: type | None, exc_value: BaseException | None, traceback: Any | None) -> None: ...
    def select(self, mailbox: str | None) -> MailboxOperationResult: ...
    def close(self) -> MailboxOperationResult: ...
    def check(self) -> MailboxOperationResult: ...
    def status(self, mailbox: Mailbox, *status_items: MailboxStatusItems) -> MailboxOperationResult: ...
    def get_monitoring_statistics(self) -> dict[str, Any]: ...

class IMAPMailboxService(BaseMailboxService):
    bulk_operation_batch_size: int
    max_concurrent_operations: int
    def __init__(self, client: IMAPClient) -> None: ...
    def search(self, criteria: IMAPSearchCriteria, charset: str | None = 'UTF-8') -> MailboxOperationResult: ...
    def create_message_set_from_search(self, criteria: IMAPSearchCriteria, charset: str | None = 'UTF-8') -> MessageSet: ...
    def trash(self, msg_set: MessageSet, trash_mailbox: Mailbox) -> MailboxOperationResult: ...
    def delete(self, msg_set: MessageSet, trash_mailbox: Mailbox) -> MailboxOperationResult: ...
    def move(self, msg_set: MessageSet, destination_mailbox: Mailbox) -> MailboxOperationResult: ...
    def restore(self, msg_set: MessageSet, trash_mailbox: Mailbox, safe_mailbox: Mailbox) -> MailboxOperationResult: ...
    def fetch(self, msg_set: MessageSet, msg_part: MessagePart) -> MailboxOperationResult: ...
    def save_sent(self, sent_mailbox: Mailbox, raw: RawEmail, flags: Flag = None, date_time: str = None) -> MailboxOperationResult: ...
    def upload_eml(self, emails: EmailIterator | list[EmailMessage], flags: Flag, mailbox: Mailbox) -> BulkOperationResult: ...
    def bulk_move(self, message_sets: list[tuple[MessageSet, Mailbox]], batch_size: int | None = None) -> BulkOperationResult: ...
    def bulk_delete(self, message_sets: list[tuple[MessageSet, Mailbox]], batch_size: int | None = None) -> BulkOperationResult: ...
    def get_mailbox_statistics(self, mailbox: Mailbox | None = None) -> MailboxStatistics: ...
    def search_and_process(self, criteria: IMAPSearchCriteria, processor_func: callable, batch_size: int | None = None, charset: str | None = 'UTF-8') -> BulkOperationResult: ...

class IMAPMailboxUIDService(BaseMailboxService):
    bulk_operation_batch_size: int
    def __init__(self, client: IMAPClient) -> None: ...
    def uid_search(self, criteria: IMAPSearchCriteria, charset: str | None = 'UTF-8') -> MailboxOperationResult: ...
    def create_message_set_from_search(self, criteria: IMAPSearchCriteria, charset: str | None = 'UTF-8') -> MessageSet: ...
    def uid_trash(self, msg_set: MessageSet, trash_mailbox: Mailbox) -> MailboxOperationResult: ...
    def uid_delete(self, msg_set: MessageSet, trash_mailbox: Mailbox) -> MailboxOperationResult: ...
    def uid_move(self, msg_set: MessageSet, destination_mailbox: Mailbox) -> MailboxOperationResult: ...
    def uid_restore(self, msg_set: MessageSet, trash_mailbox: Mailbox, safe_mailbox: Mailbox) -> MailboxOperationResult: ...
    def uid_fetch(self, msg_set: MessageSet, msg_part: MessagePart) -> MailboxOperationResult: ...
    def process_messages_in_batches(self, msg_set: MessageSet, processor_func: callable, batch_size: int = 100, msg_part: MessagePart = ...) -> BulkOperationResult: ...
