from _typeshed import Incomplete
from sage_imap.exceptions import IMAPAuthenticationError as IMAPAuthenticationError, IMAPClientError as IMAPClientError, IMAPConfigurationError as IMAPConfigurationError, IMAPConnectionError as IMAPConnectionError, IMAPMailboxSelectionError as IMAPMailboxSelectionError
from typing import Any, Callable, TypeVar

logger: Incomplete
F = TypeVar('F', bound=Callable[..., Any])

def mailbox_selection_required(func: F) -> F: ...
def connection_required(func: F) -> F: ...
def authenticated_required(func: F) -> F: ...
def performance_monitor(track_time: bool = True, track_memory: bool = False, log_performance: bool = True, store_metrics: bool = True): ...
def retry_on_failure(max_retries: int = 3, delay: float = 1.0, exponential_backoff: bool = True, exceptions: tuple = ..., on_retry: Callable | None = None): ...
def validate_parameters(**validators): ...
def log_function_calls(log_level: int = ..., log_args: bool = False, log_result: bool = False, log_exceptions: bool = True): ...
def cache_result(ttl: int | None = None, maxsize: int = 128, typed: bool = False, key_func: Callable | None = None): ...
def rate_limit(calls: int, period: float): ...
def validate_types(**type_validators): ...
def timeout(seconds: float): ...
def exception_handler(exceptions: type[Exception] | tuple = ..., default_return: Any = None, log_exceptions: bool = True, reraise: bool = False): ...
def deprecated(message: str = '', version: str = ''): ...
def get_performance_metrics(func_name: str | None = None) -> dict[str, Any]: ...
def clear_performance_metrics(func_name: str | None = None): ...
def circuit_breaker(failure_threshold: int = 5, recovery_timeout: float = 60.0, expected_exception: type[Exception] = ...): ...
