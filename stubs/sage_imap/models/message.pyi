from _typeshed import Incomplete
from dataclasses import dataclass
from functools import cached_property as cached_property
from sage_imap.helpers.typings import MessageSetType as MessageSetType
from typing import Any

logger: Incomplete

@dataclass
class MessageSet:
    msg_ids: MessageSetType = ...
    is_uid: bool = ...
    mailbox: str | None = ...
    def __post_init__(self) -> None: ...
    @classmethod
    def from_uids(cls, uids: list[int], mailbox: str | None = None) -> MessageSet: ...
    @classmethod
    def from_sequence_numbers(cls, seq_nums: list[int], mailbox: str | None = None) -> MessageSet: ...
    @classmethod
    def from_email_messages(cls, messages: list['EmailMessage']) -> MessageSet: ...
    @classmethod
    def from_range(cls, start: int | str, end: int | str, is_uid: bool = True, mailbox: str | None = None) -> MessageSet: ...
    @classmethod
    def all_messages(cls, is_uid: bool = True, mailbox: str | None = None) -> MessageSet: ...
    @cached_property
    def parsed_ids(self) -> list[int]: ...
    @cached_property
    def id_ranges(self) -> list[tuple]: ...
    @cached_property
    def estimated_count(self) -> int: ...
    def __len__(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, msg_id: int) -> bool: ...
    def __iter__(self): ...
    def is_empty(self) -> bool: ...
    def is_single_message(self) -> bool: ...
    def is_range_only(self) -> bool: ...
    def has_open_range(self) -> bool: ...
    def get_first_id(self) -> int | None: ...
    def get_last_id(self) -> int | None: ...
    def union(self, other: MessageSet) -> MessageSet: ...
    def intersection(self, other: MessageSet) -> MessageSet: ...
    def subtract(self, other: MessageSet) -> MessageSet: ...
    def iter_batches(self, batch_size: int = 100) -> MessageSetBatchIterator: ...
    def to_dict(self) -> dict[str, Any]: ...
    def split_by_size(self, max_size: int) -> list['MessageSet']: ...
    def validate_for_mailbox(self, mailbox: str) -> None: ...
    def __init__(self, msg_ids=..., is_uid=..., mailbox=...) -> None: ...

class MessageSetBatchIterator:
    message_set: Incomplete
    batch_size: Incomplete
    current_index: int
    individual_ids: Incomplete
    def __init__(self, message_set: MessageSet, batch_size: int) -> None: ...
    def __iter__(self): ...
    def __next__(self) -> MessageSet: ...
    def __len__(self) -> int: ...

def create_uid_set(uids: list[int], mailbox: str | None = None) -> MessageSet: ...
def create_sequence_set(seq_nums: list[int], mailbox: str | None = None) -> MessageSet: ...
def merge_message_sets(sets: list[MessageSet]) -> MessageSet: ...
