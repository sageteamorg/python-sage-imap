import email
from _typeshed import Incomplete
from dataclasses import dataclass
from datetime import datetime
from functools import cached_property as cached_property
from pathlib import Path
from sage_imap.helpers.enums import Flag as Flag
from sage_imap.helpers.typings import EmailAddress as EmailAddress, EmailDate as EmailDate
from typing import Any, Callable

logger: Incomplete

@dataclass
class Attachment:
    filename: str
    content_type: str
    payload: bytes = ...
    id: str | None = ...
    content_id: str | None = ...
    content_transfer_encoding: str | None = ...
    def __post_init__(self) -> None: ...
    @cached_property
    def size(self) -> int: ...
    @cached_property
    def is_image(self) -> bool: ...
    @cached_property
    def is_text(self) -> bool: ...
    def save_to_file(self, directory: str | Path) -> Path: ...
    def __init__(self, filename, content_type, payload, id=..., content_id=..., content_transfer_encoding=...) -> None: ...

@dataclass
class EmailMessage:
    message_id: str = ...
    subject: str = ...
    from_address: EmailAddress | None = ...
    to_address: list[EmailAddress] = ...
    cc_address: list[EmailAddress] = ...
    bcc_address: list[EmailAddress] = ...
    date: EmailDate | None = ...
    raw: bytes | None = ...
    plain_body: str = ...
    html_body: str = ...
    attachments: list[Attachment] = ...
    flags: list[Flag] = ...
    headers: dict[str, Any] = ...
    size: int = ...
    sequence_number: int | None = ...
    uid: int | None = ...
    def __post_init__(self) -> None: ...
    @classmethod
    def read_from_eml_file(cls, file_path: str | Path) -> EmailMessage: ...
    @classmethod
    def read_from_eml_bytes(cls, eml_bytes: bytes) -> EmailMessage: ...
    def parse_eml_content(self) -> None: ...
    def sanitize_message_id(self, message_id: str) -> str | None: ...
    def parse_date(self, date_str: str | None) -> EmailDate | None: ...
    def extract_body(self, message: email.message.EmailMessage) -> tuple[str, str]: ...
    def extract_attachments(self, message: email.message.EmailMessage) -> list[Attachment]: ...
    @staticmethod
    def extract_flags(flag_data: bytes) -> list[Flag]: ...
    def decode_payload(self, part: email.message.EmailMessage) -> str: ...
    @cached_property
    def content_hash(self) -> str: ...
    @cached_property
    def all_recipients(self) -> list[EmailAddress]: ...
    @cached_property
    def is_multipart(self) -> bool: ...
    @cached_property
    def total_attachment_size(self) -> int: ...
    def has_attachments(self) -> bool: ...
    def get_attachment_filenames(self) -> list[str]: ...
    def get_attachments_by_type(self, content_type: str) -> list[Attachment]: ...
    def get_image_attachments(self) -> list[Attachment]: ...
    def has_html_body(self) -> bool: ...
    def has_plain_body(self) -> bool: ...
    def get_body_preview(self, max_length: int = 100) -> str: ...
    def is_reply(self) -> bool: ...
    def is_forward(self) -> bool: ...
    def write_to_eml_file(self, file_path: str | Path) -> Path: ...
    def to_dict(self) -> dict[str, Any]: ...
    def __init__(self, message_id, subject=..., from_address=..., to_address=..., cc_address=..., bcc_address=..., date=..., raw=..., plain_body=..., html_body=..., attachments=..., flags=..., headers=..., size=..., sequence_number=..., uid=...) -> None: ...

class EmailIterator:
    def __init__(self, email_list: list[EmailMessage]) -> None: ...
    def __iter__(self) -> EmailIterator: ...
    def __next__(self) -> EmailMessage: ...
    def __getitem__(self, index: int | slice) -> EmailMessage | EmailIterator: ...
    def __len__(self) -> int: ...
    def __bool__(self) -> bool: ...
    def reset(self) -> None: ...
    def current_position(self) -> int: ...
    def __reversed__(self) -> EmailIterator: ...
    def __contains__(self, item: EmailMessage) -> bool: ...
    def count(self, condition: Callable[[EmailMessage], bool]) -> int: ...
    def filter(self, criteria: Callable[[EmailMessage], bool]) -> EmailIterator: ...
    def filter_by_header(self, key: str, value: str | None = None) -> EmailIterator: ...
    def filter_by_subject_part(self, part: str, case_sensitive: bool = False) -> EmailIterator: ...
    def filter_by_subject_regex(self, pattern: str, flags: int = 0) -> EmailIterator: ...
    def filter_by_sender(self, sender: str, exact_match: bool = False) -> EmailIterator: ...
    def filter_by_recipient(self, recipient: str, exact_match: bool = False) -> EmailIterator: ...
    def filter_by_date_range(self, start_date: datetime | None = None, end_date: datetime | None = None) -> EmailIterator: ...
    def filter_by_size_range(self, min_size: int | None = None, max_size: int | None = None) -> EmailIterator: ...
    def filter_by_flags(self, flags: list[Flag], match_all: bool = False) -> EmailIterator: ...
    def filter_by_attachment_count(self, min_count: int = 0, max_count: int | None = None) -> EmailIterator: ...
    def filter_by_content_type(self, content_type: str) -> EmailIterator: ...
    def find_by_message_id(self, message_id: str) -> EmailMessage | None: ...
    def find(self, condition: Callable[[EmailMessage], bool]) -> EmailMessage | None: ...
    def find_all(self, condition: Callable[[EmailMessage], bool]) -> EmailIterator: ...
    def filter_by_attachment(self) -> EmailIterator: ...
    def filter_without_attachment(self) -> EmailIterator: ...
    def filter_by_body_content(self, content: str, case_sensitive: bool = False, html_only: bool = False, plain_only: bool = False) -> EmailIterator: ...
    def get_total_size(self) -> int: ...
    def get_total_attachment_size(self) -> int: ...
    def get_unique_senders(self) -> list[str]: ...
    def get_unique_recipients(self) -> list[str]: ...
    def get_date_range(self) -> tuple[str | None, str | None]: ...
    def group_by_sender(self) -> dict[str, 'EmailIterator']: ...
    def group_by_date(self, date_format: str = '%Y-%m-%d') -> dict[str, 'EmailIterator']: ...
    def sort_by_date(self, ascending: bool = True) -> EmailIterator: ...
    def sort_by_size(self, ascending: bool = True) -> EmailIterator: ...
    def sort_by_subject(self, ascending: bool = True) -> EmailIterator: ...
    def sort_by_sender(self, ascending: bool = True) -> EmailIterator: ...
    def sort_by_attachment_count(self, ascending: bool = True) -> EmailIterator: ...
    def take(self, count: int) -> EmailIterator: ...
    def skip(self, count: int) -> EmailIterator: ...
    def page(self, page_number: int, page_size: int) -> EmailIterator: ...
    def get_statistics(self) -> dict[str, Any]: ...
    def to_list(self) -> list[EmailMessage]: ...
    def to_dict_list(self) -> list[dict[str, Any]]: ...
    def save_all_to_directory(self, directory: str | Path, filename_template: str = '{subject}_{date}') -> list[Path]: ...
    def chain(self, other: EmailIterator) -> EmailIterator: ...
    def deduplicate(self, key_func: Callable[[EmailMessage], str] | None = None) -> EmailIterator: ...
