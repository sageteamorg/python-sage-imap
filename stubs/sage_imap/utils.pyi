from _typeshed import Incomplete
from datetime import datetime
from pathlib import Path
from sage_imap.exceptions import IMAPClientError as IMAPClientError, IMAPConfigurationError as IMAPConfigurationError, IMAPEmptyFileError as IMAPEmptyFileError, IMAPInvalidEmailDateError as IMAPInvalidEmailDateError
from sage_imap.models.email import EmailIterator as EmailIterator, EmailMessage as EmailMessage
from typing import Any, Callable

logger: Incomplete
MAX_FILENAME_LENGTH: int
MAX_SUBJECT_LENGTH: int
VALID_EMAIL_REGEX: Incomplete
COMMON_MIME_TYPES: Incomplete

def convert_to_local_time(dt: datetime) -> datetime: ...
def parse_email_date(date_str: str | None) -> datetime | None: ...
def format_email_date(dt: datetime) -> str: ...
def sanitize_filename(filename: str, max_length: int = ...) -> str: ...
def validate_email_address(email: str) -> bool: ...
def normalize_subject(subject: str) -> str: ...
def get_mime_type(filename: str) -> str: ...
def calculate_file_hash(file_path: Path, algorithm: str = 'md5') -> str: ...
def calculate_content_hash(content: bytes, algorithm: str = 'md5') -> str: ...
def read_eml_files_from_directory(directory_path: Path, recursive: bool = False, validate_emails: bool = True) -> EmailIterator: ...
def read_eml_files_from_zip(zip_path: Path, validate_emails: bool = True, extract_nested_zips: bool = False) -> EmailIterator: ...
def is_english(s: str) -> bool: ...
def is_valid_message_id(message_id: str) -> bool: ...
def get_file_extension(filename: str) -> str: ...
def create_safe_directory(path: Path, mode: int = 493) -> Path: ...
def format_bytes(size: int) -> str: ...
def extract_email_domain(email: str) -> str | None: ...
def batch_process(items: list[Any], batch_size: int = 100, processor: Callable[[list[Any]], Any] = None) -> list[Any]: ...
def merge_email_iterators(*iterators: EmailIterator) -> EmailIterator: ...
def deduplicate_emails(emails: EmailIterator, key_func: Callable[[EmailMessage], str] | None = None) -> EmailIterator: ...
def validate_directory_path(path: str | Path) -> Path: ...
def safe_filename_from_subject(subject: str, max_length: int = 50) -> str: ...
